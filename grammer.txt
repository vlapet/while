STATEMENTS              := STATEMENT; STATEMENTS | NONE
STATEMENT               := ASSIGN
                         | REASSIGN // same as assign but for mutating already defined 'var' variables
                         | IF 
                         | LOOP
                         | BLOCK
                         | RETURN

EXPRESSION              := LITERAL
                         | FUNCTION // I will allow `var x = FUNCTION` just because I can haha!
                         | IF
                        // | LOOP <- TBD
                        // | SWITCH <- TBD
                         | RETURN
                         | BLOCK


IF                      := if EXPRESSION BLOCK ELSE
ELSE                    := BLOCK

BLOCK                   := {  STATEMENTS  } // final expression returns
                         | { STATEMENTS; EXPRESSION }

CONSTDECL | VARDECL     := EXPRESSION 

FUNCTION                := fn LITERAL (...TBD) TYPE BLOCK

RETURN                  := return [|NONE | EXPRESSION |]


/*


const a = EXPRESSION; // expressions resolve to some final value
e.g.
const b = 3;
const c = if true {3} else {9};
const d = if true {
    const x = 9; 
    9
} else {7};

// const e = while c < 10 {} <- TBD
const f = fn () { return 3; }; // no need for special lambda syntax

const g = f(); // g = 3



*/